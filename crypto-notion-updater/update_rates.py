import os
import requests
import logging
from datetime import datetime
from time import sleep
from notion_client import Client
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('crypto_updater.log'),
        logging.StreamHandler()
    ]
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
NOTION_TOKEN = os.getenv("NOTION_TOKEN")
DATABASE_ID = os.getenv("DATABASE_ID")
CRYPTOS = {
    "bitcoin": "BTC",
    "ethereum": "ETH", 
    "ripple": "XRP",
    "solana": "SOL",
    "cardano": "ADA",
    "tron": "TRX",
    "spark-2": "SPK",
    "tether": "USDT",
    "zora": "ZORA",
    "golem": "GLM",
    "vine": "VINE",
    "codatta": "codatta",
    "block-4": "block"
}

def get_all_prices(retries=3):
    """–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ü–µ–Ω—ã –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º"""
    coin_ids = ",".join(CRYPTOS.keys())
    url = f"https://api.coingecko.com/api/v3/simple/price?ids={coin_ids}&vs_currencies=usd"
    
    for attempt in range(retries):
        try:
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                return {coin_id: data[coin_id]['usd'] for coin_id in CRYPTOS if coin_id in data}
            
            logging.warning(f"Attempt {attempt + 1}: Status code {response.status_code}")
            if response.status_code == 429:
                reset_time = int(response.headers.get('Retry-After', 60))
                logging.info(f"Rate limit hit. Waiting {reset_time} seconds")
                sleep(reset_time)
                
        except Exception as e:
            logging.warning(f"Attempt {attempt + 1}: Error - {str(e)}")
        
        if attempt < retries - 1:
            sleep(5)
    
    raise Exception(f"Failed to get prices after {retries} attempts")

def get_existing_pages(notion):
    """–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    existing_pages = {}
    start_cursor = None
    
    try:
        while True:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–∞—á–∫–∞–º–∏
            query_params = {
                "database_id": DATABASE_ID,
                "page_size": 100
            }
            if start_cursor:
                query_params["start_cursor"] = start_cursor
                
            response = notion.databases.query(**query_params)
            pages = response.get("results", [])
            
            logging.info(f"üîç Processing {len(pages)} pages from database")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            for page in pages:
                try:
                    page_id = page.get("id")
                    properties = page.get("properties", {})
                    
                    # –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –≤—ã–≤–µ–¥–µ–º –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    logging.info(f"üìÑ Page ID: {page_id}")
                    for prop_name, prop_value in properties.items():
                        logging.info(f"   Property '{prop_name}': {prop_value}")
                    
                    # –°–ø–æ—Å–æ–± 1: –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–≤–æ–π—Å—Ç–≤–µ Name (title)
                    name_property = properties.get("Name", {})
                    if name_property.get("title"):
                        title_list = name_property["title"]
                        if title_list and len(title_list) > 0:
                            page_name = title_list[0].get("text", {}).get("content", "").strip()
                            if page_name:
                                existing_pages[page_name.upper()] = page_id
                                logging.info(f"‚úÖ Found by Name: '{page_name}' -> {page_id}")
                                continue
                    
                    # –°–ø–æ—Å–æ–± 2: –ò—â–µ–º –≤ —Å–≤–æ–π—Å—Ç–≤–µ Symbol (rich_text)
                    symbol_property = properties.get("Symbol", {})
                    if symbol_property.get("rich_text"):
                        rich_text_list = symbol_property["rich_text"]
                        if rich_text_list and len(rich_text_list) > 0:
                            symbol_name = rich_text_list[0].get("text", {}).get("content", "").strip()
                            if symbol_name:
                                existing_pages[symbol_name.upper()] = page_id
                                logging.info(f"‚úÖ Found by Symbol: '{symbol_name}' -> {page_id}")
                                continue
                    
                    # –°–ø–æ—Å–æ–± 3: –ò—â–µ–º –≤ –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–≤–æ–π—Å—Ç–≤–∞—Ö
                    for prop_name, prop_value in properties.items():
                        if prop_value.get("rich_text"):
                            rich_text_list = prop_value["rich_text"]
                            if rich_text_list and len(rich_text_list) > 0:
                                text_content = rich_text_list[0].get("text", {}).get("content", "").strip().upper()
                                if text_content in [s.upper() for s in CRYPTOS.values()]:
                                    existing_pages[text_content] = page_id
                                    logging.info(f"‚úÖ Found by property '{prop_name}': '{text_content}' -> {page_id}")
                                    break
                    
                    logging.warning(f"‚ùå Could not find identifiable name for page {page_id}")
                            
                except Exception as e:
                    logging.warning(f"Error processing page {page.get('id')}: {e}")
                    continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if response.get("has_more") and response.get("next_cursor"):
                start_cursor = response.get("next_cursor")
            else:
                break
                
    except Exception as e:
        logging.error(f"Error fetching existing pages: {e}")
    
    logging.info(f"üéØ Total existing pages mapped: {len(existing_pages)}")
    logging.info(f"üìã Found symbols: {list(existing_pages.keys())}")
    return existing_pages

def update_notion_database():
    """–û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Notion"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
        notion = Client(auth=NOTION_TOKEN)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –û–î–ò–ù –†–ê–ó
        existing_pages = get_existing_pages(notion)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ü–µ–Ω—ã –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        prices = get_all_prices()
        logging.info(f"üí∞ Successfully fetched prices: {prices}")
        
        updated_count = 0
        created_count = 0
        error_count = 0
        
        for coin_id, symbol in CRYPTOS.items():
            try:
                if coin_id not in prices:
                    logging.error(f"‚ùå No price data for {symbol} ({coin_id})")
                    error_count += 1
                    continue
                
                current_price = prices[coin_id]
                symbol_upper = symbol.upper()
                
                logging.info(f"üîç Looking for existing page: {symbol} ({symbol_upper})")
                
                # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                page_id = existing_pages.get(symbol_upper)
                
                if page_id:
                    # –û–ë–ù–û–í–õ–Ø–ï–ú —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                    try:
                        notion.pages.update(
                            **{
                                "page_id": page_id,
                                "properties": {
                                    "Price": {"number": float(current_price)},
                                    "Last Updated": {"date": {"start": datetime.now().isoformat()}}
                                }
                            }
                        )
                        updated_count += 1
                        logging.info(f"‚úÖ UPDATED {symbol} price to {current_price} (page: {page_id})")
                        
                    except Exception as update_error:
                        logging.error(f"‚ùå Failed to update {symbol}: {update_error}")
                        error_count += 1
                
                else:
                    # –°–û–ó–î–ê–ï–ú –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    try:
                        notion.pages.create(
                            **{
                                "parent": {"database_id": DATABASE_ID},
                                "properties": {
                                    "Name": {"title": [{"text": {"content": symbol}}]},
                                    "Symbol": {"rich_text": [{"text": {"content": coin_id}}]},
                                    "Price": {"number": float(current_price)},
                                    "Last Updated": {"date": {"start": datetime.now().isoformat()}}
                                }
                            }
                        )
                        created_count += 1
                        logging.info(f"üÜï CREATED new entry for {symbol} with price {current_price}")
                    except Exception as create_error:
                        logging.error(f"‚ùå Failed to create {symbol}: {create_error}")
                        error_count += 1
                        
            except Exception as e:
                logging.error(f"‚ùå Error processing {symbol}: {str(e)}", exc_info=True)
                error_count += 1
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logging.info(f"üéØ UPDATE SUMMARY: {updated_count} updated, {created_count} created, {error_count} errors")
        
        # –ï—Å–ª–∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –∑–∞–Ω–æ–≤–æ, –≤—ã–≤–µ–¥–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        if updated_count == 0 and created_count > 0:
            logging.warning("üö® WARNING: All entries were created new! Existing pages were not found.")
            logging.warning("üí° Check if the property names in your Notion database match the code.")
                
    except Exception as e:
        logging.critical("üí• Fatal error in Notion update", exc_info=True)
        raise

if __name__ == "__main__":
    update_notion_database()